---
import Button from '../components/Button.astro';
interface Props{
  items: Array<{title: string, href: string, mainImage?: string, mainTitle?: string, mainBody?: string, videoExplicativo?:string, secondaryTitle?: string, descripcionCodigo?: string, descripcionNormal?: string,}>,
  
}

const { items} = Astro.props;

---

<main class="contenedor mx-auto py-5 md:py-14 lg:py-32 ">
  <div class="text-sm font-medium text-center w-fit text-gray-400 border-b border-claro ">
    <ul class="flex flex-wrap justify-center lg:justify-start -mb-px">
        {items.map((item, index) => (
          <li class="me-2">
            <a href={item.href} class=`btns ${index === 0 ? 'text-claro underline' : ''} inline-block p-4 border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300`>{item.title}</a>
          </li>
        ))}  
    </ul>
  </div>

  <!-- CONTENIDO -->
  {items.map((item, index) => (
    <div id={item.title} class=`w-full lg:w-3/4 lg:mx-auto xl:mx-0 mt-20 p-4 md:p-10 bg-violeta bg-opacity-50 text-white rounded-sm shadow-2xl ${index === 0 ? '' : 'hidden'}`>
      {item.mainImage ?  
        <img class="rounden-sm" src={item.mainImage}/> : 
        <video id="lazyVideo" class="w-full" controls>
          <source src={item.videoExplicativo}>
          </video>
      }

      {item.mainTitle ? <h1 class="font-extrabold text-4xl my-5">{item.mainTitle}.</h1> : <h2 class="font-extrabold text-3xl mt-8 mb-5">{item.secondaryTitle}.</h2>}
      
      {item.mainBody ? <p class="text-gray-300 font-semibold">{item.mainBody}</p> :
      <div class="block">
        <div id="accordion-collapse" data-accordion="collapse">
          <h2 id="accordion-collapse-heading-1">
            <button type="button" class="flex items-center rounded-sm justify-between w-full p-5 font-medium rtl:text-right text-gray-500 border  border-claro focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800  dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 gap-3" data-accordion-target=`#accordion-collapse-body-${index}` aria-expanded="true" aria-controls="accordion-collapse-body-1">
              <span class="text-claro">Explicación.</span>
              <svg data-accordion-icon class="w-3 h-3 rotate-180 shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"/>
              </svg>
            </button>
          </h2>
          <div id=`accordion-collapse-body-${index}` class="hidden" aria-labelledby="accordion-collapse-heading-1">
            <div class="p-5 border  border-claro  bg-gray-900">
              <Fragment set:html={item.descripcionNormal} />
            </div>
          </div>
        </div>
      </div>
      }
    </div>
  ))}  
</main>
 <!-- BTN DE VOLVER -->
<div class="fixed bottom-0 md:right-10">
  <Button title='Volver', bg_color='bg-claro' href='/'></Button>
</div>

<script>
  const btns = document.getElementsByClassName("btns");
  var anterior = "Explicación";
  var id = 0;
  for (let index = 0; index < btns.length; index++) {
    btns[index].addEventListener('click', (event) => {
      if(anterior != ""){
        let contenido = document.getElementById(anterior);

        anterior = "";
        btns[id].classList.remove("underline");
        btns[id].classList.remove("text-white");
        contenido?.classList.add("hidden");
      }
      event.preventDefault();
      btns[index].classList.add("text-white");
      btns[index].classList.add("underline");
      let texto = event.srcElement.innerHTML;
      let contenido = document.getElementById(texto);
      anterior = texto;
      id = index;
      contenido?.classList.remove("hidden");
    })
    
  }

  /*  ACORDEON */

  const accordionItems = document.querySelectorAll('[data-accordion-target]');

  console.log(accordionItems);

  accordionItems.forEach(item => {
      item.addEventListener('click', function () {
       
          const target = this.getAttribute('data-accordion-target');
          console.log(target);
          const element = document.querySelector(target);

          element.classList.toggle('hidden');
      });
  });

  /* LAZY LOAD VIDEOS */
  var lazyVideo = document.getElementById('lazyVideo');
  if ('IntersectionObserver' in window) {
      var observer = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(entry) {
          if (entry.isIntersecting) {
            var source = entry.target.querySelector('source');
            source.src = source.dataset.src;
            observer.unobserve(entry.target);
          }
        });
      }, { rootMargin: '0px 0px 50px 0px' }); // Adjust rootMargin as needed
      observer.observe(lazyVideo);
  }else {
      // Fallback for browsers that don't support Intersection Observer
      lazyVideo.src = lazyVideo.querySelector('source').dataset.src;
  }
</script>